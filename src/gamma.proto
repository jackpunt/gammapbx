syntax = "proto3";
//package display.client;

// add_unit(id,type,owner,loc[x,y],hp) : create unit of 'type' at 'loc' and register as 'id'
// del_unit(id) : he's dead, jim
// update(id, [owner], [loc], [hp], ...)

message Iloc {
    int32	y = 1;
    int32	x = 2;
}
message Floc {
    float	y = 1;
    float	x = 2;
}

// delta loc .. is this robust/usable? 
// Expect to send keyframe every 5 or so
// interpolated with FDloc/IDloc updates
// [or not: if keyframe includes a Dloc, and unit still on track]
message IDloc {
    int32	dy = 1;
    int32	dx = 2;
}
// delta loc
message FDloc {
    float	dy = 1;
    float	dx = 2;
}
// set a speed: [dloc/dturn]
message Dloc {
    float	dy_dt = 1;
    float	dx_dt = 2;
}

message Turn {
    uint32	id = 1;		// new turn number; no Seq for this...
}

// type of following message:
message AMessage {
    Turn        turn = 1;	// Turn
    UpdateSeq   updates = 2;	// Update
    RevealSeq   reveals = 3;	// Reveal
    AddSeq      adds = 4;	// Add (Ident, Update)
    DelSeq      dels = 5;	// Del
    TerImageSeq ter_images = 21;// TerImage, ImageAry
    ModImageSeq mod_images = 22;// ModImage, ImageAry
}
enum Fields {
    none = 0;
    turn = 1;
    update=2;
    reveal=3;
    add  = 4;
    del  = 5;
    timages = 21;
    mimages = 22;
}

// add Player? add Unit?
// ADD[{id=1, type="Player", display="Self", ...}
//     {id=2, type="Player", display="Other", ...}
//     {id=3, type="Player", display="Gaia", ...}
//     {id=4, type="HQ", player=1, loc=[x0,y0], display="HQ"}	 at site of primary lander
//     {id=5, type="Scout", player=1, loc=[x1,y1], display="Scout-0"}
//    ]
// Code:REVEAL
// TerMap[{loc=[x0,y0], type="GRASS", level=34}]


// Unit position/health update:
// Update-Floc, Update-Iloc, Update-Dloc, ...
message Update {		// comp_of UpdateSeq
    uint32	id = 1;		// objectId (required)
    int32	hp = 2;		// hp for Unit update
    bool	isHp = 3;
    // one of {floc, iloc}
    Floc	floc = 4;
    bool	is_floc = 5;
    Iloc	iloc = 6;
    bool	is_iloc = 7;
    // set expected speed: (close enough for many purposes; on keyframe set Floc/Idoc)
    Dloc	dloc = 8;
    bool	is_dloc = 9;
    // change of owner: push it into Ident[id]
    uint32	player_id = 10;
}

message UpdateSeq {		// comp_of AMessage
    repeated Update updates = 1;
}

// unit identity and presentation
message Ident {			// comp_of Add
    uint32	id = 1;		// unit_id, referenced in Update, Del (from Update, if missing)
    string	type = 2;	// engineer, building, scout, etc (determines menu)
    uint32	i_ndx = 3;	// ModImage of constant size icon
    uint32	m_ndx = 4;	// 2D ModImage (scaled image or shape) or 3D-model identifier
    string	display = 8;	// display name for new Unit (hovertext: eng#5)
    uint32	player_id = 10;	// new Unit associated with Player (player id, livery)
}

// add Unit (or Player/Team/Civ)
// Add { type, player, display, Update }
message Add {			// comp_of AddSeq
    Ident	ident = 1;	// who/what
    Update	update = 2;	// where (initial value)
}
message AddSeq {		// comp_of AMessage
    repeated Add adds = 1;
}

message Del {			// comp_of DelSeq
    uint32	id = 2;		// required
}
message DelSeq {		// comp_of AMessage
    repeated Del dels = 1;
}


// from iloc(x,y) do set (x..+dx,y) to (ztv = zndx,tv)
message TerRunX {		// comp_of TerRowY
    int32	dx = 2;		// cells to reveal = dx+1 [dx default=0]
    int32	ztv = 3;	// 10-bits(zndx) + 6bit(tv)
}
message TerRowY { 		// comp_of RevealSeq
    Iloc	loc = 1;	// start at (y,x) [upper-left corner]
    repeated TerRunX runx = 2;	// for each runx: for x+=0..dx: reveal(y,x, ztv) 
}
message RevealSeq {		// comp_of AMessage
    repeated TerRowY rowy = 1;
}

// override implict image location (from parsing ndx relative to ImageAry)
message SubImage {		// comp_of TerImage | ModImage
    uint32	y0 = 2;		// npixels*(r=tvid/ncols)
    uint32	x0 = 3;		// npixels*(c=tvid%ncols)
    uint32	y_px = 4;	// npixels
    uint32	x_px = 5;	// npixels
    uint32	y_off = 6;	// 0 (offset to drag/rotate center)
    uint32	x_off = 7;	// 0 (offset to drag/rotate center)
    string	alt_url = 8;	// use alternative image (RARE)
}

// Q: can/how we support multiple image blocks?
// A: there is one for terrain [TerImage] and one for Models [ModImage]



// usage: extract a single pixel at img[r,c] given a {x,y,tvid}
// tvid maps to a npx X npx subimage
// img[r,c] -> tvid(r*ncols+c); tvid->(tvid/ncols,tvid%ncols)
// TODO: rename to ImageBlock [because ImageAry is not an ARRAY in the ts sense]
message ImageAry {		// comp_of TerImageSeq | ModImageSeq
    uint32 npixels = 1;		// each sub-image is npixels X npixels, in  row major order
    uint32 nrows = 2;		// each of the nrows
    uint32 ncols = 3;		// has ncols
    string url = 4;		// fetch master image
}

// if SubImage is not supplied, then y0=tvid/ncols, x0=tvid%ncols, y_px=x_px=npixels
// tvid is used as index in to the y by x grid of npixels in ImageAry

// ImageAry implicitly associates tvids in range [0..nr*nc]
// with the sub-images in ImageAry at: img[r=tvid/ncols, c=tvid%ncols] [npixels X npixels]
// TerImage associates each tvid with a display name
message TerImage {		// comp_of TerImageSeq
    uint32	tvid = 1;	// assign name & subimage to tvid
    string	name = 2;	// advisory, for alt presentation, description
    SubImage	sub_image = 3;	// optional (use tvid/ncols,tvid%ncols,npix,npix)
}

message TerImageSeq {		// comp_of AMessage 
    ImageAry	comp_image = 1;	// required: composite image
    repeated TerImage tmag = 2;	// optional
    repeated int32    zval = 3;	// length=1023 (2^10-1): elevation in meters, by zndx
    repeated int32    indx = 4;	// length<64: map 6-bit tvid -> indx; ImgageAry[r*ncols+c]
    				// one layer of indirection so can place images easily
    // see TerrainMap.java for coding of ztv & zval (meters) -> zndx (10-bit)
}

// images for unit models, or other non-terrain things (on the unit-canvas)
// set mapping from m_ndx and icon_ndx to image (in ImageAry mblk)
// for each player, create a master with the livery color replaced
message ModImage {		// comp_of ModImageSeq
    uint32	mndx = 1;
    string	name = 2;	// model/image display name (dubious)
    SubImage	sub_image = 3;
    uint32	p_color = 5;	// replace pixels of this RGB with player's color [livery]
    // or maybe it is constant: #888888, #F10102 ?
}

message ModImageSeq {		// comp_of AMessage 
    ImageAry	mblk = 1;	// master image
    repeated ModImage model = 2;// extract sub-image(a 2D model), call it models[mndx] 
}
