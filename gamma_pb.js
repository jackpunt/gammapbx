/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AMessage', null, global);
goog.exportSymbol('proto.Add', null, global);
goog.exportSymbol('proto.AddSeq', null, global);
goog.exportSymbol('proto.Del', null, global);
goog.exportSymbol('proto.DelSeq', null, global);
goog.exportSymbol('proto.Dloc', null, global);
goog.exportSymbol('proto.FDloc', null, global);
goog.exportSymbol('proto.Fields', null, global);
goog.exportSymbol('proto.Floc', null, global);
goog.exportSymbol('proto.IDloc', null, global);
goog.exportSymbol('proto.Ident', null, global);
goog.exportSymbol('proto.Iloc', null, global);
goog.exportSymbol('proto.ImageAry', null, global);
goog.exportSymbol('proto.ModImage', null, global);
goog.exportSymbol('proto.ModImageSeq', null, global);
goog.exportSymbol('proto.RevealSeq', null, global);
goog.exportSymbol('proto.SubImage', null, global);
goog.exportSymbol('proto.TerImage', null, global);
goog.exportSymbol('proto.TerImageSeq', null, global);
goog.exportSymbol('proto.TerRasterY', null, global);
goog.exportSymbol('proto.TerRunX', null, global);
goog.exportSymbol('proto.Turn', null, global);
goog.exportSymbol('proto.Update', null, global);
goog.exportSymbol('proto.UpdateSeq', null, global);
goog.exportSymbol('proto.ZHeightMap', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Iloc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Iloc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Iloc.displayName = 'proto.Iloc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Iloc.prototype.toObject = function(opt_includeInstance) {
  return proto.Iloc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Iloc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Iloc.toObject = function(includeInstance, msg) {
  var f, obj = {
    y: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Iloc}
 */
proto.Iloc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Iloc;
  return proto.Iloc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Iloc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Iloc}
 */
proto.Iloc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Iloc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Iloc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Iloc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Iloc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 y = 1;
 * @return {number}
 */
proto.Iloc.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Iloc.prototype.setY = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.Iloc.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Iloc.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Floc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Floc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Floc.displayName = 'proto.Floc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Floc.prototype.toObject = function(opt_includeInstance) {
  return proto.Floc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Floc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Floc.toObject = function(includeInstance, msg) {
  var f, obj = {
    y: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    x: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Floc}
 */
proto.Floc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Floc;
  return proto.Floc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Floc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Floc}
 */
proto.Floc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Floc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Floc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Floc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Floc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float y = 1;
 * @return {number}
 */
proto.Floc.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Floc.prototype.setY = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.Floc.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Floc.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IDloc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IDloc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IDloc.displayName = 'proto.IDloc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IDloc.prototype.toObject = function(opt_includeInstance) {
  return proto.IDloc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IDloc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.IDloc.toObject = function(includeInstance, msg) {
  var f, obj = {
    dy: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dx: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IDloc}
 */
proto.IDloc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IDloc;
  return proto.IDloc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IDloc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IDloc}
 */
proto.IDloc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IDloc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IDloc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IDloc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.IDloc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDy();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 dy = 1;
 * @return {number}
 */
proto.IDloc.prototype.getDy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IDloc.prototype.setDy = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 dx = 2;
 * @return {number}
 */
proto.IDloc.prototype.getDx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IDloc.prototype.setDx = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FDloc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FDloc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FDloc.displayName = 'proto.FDloc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FDloc.prototype.toObject = function(opt_includeInstance) {
  return proto.FDloc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FDloc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FDloc.toObject = function(includeInstance, msg) {
  var f, obj = {
    dy: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    dx: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FDloc}
 */
proto.FDloc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FDloc;
  return proto.FDloc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FDloc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FDloc}
 */
proto.FDloc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FDloc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FDloc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FDloc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FDloc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDy();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDx();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float dy = 1;
 * @return {number}
 */
proto.FDloc.prototype.getDy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.FDloc.prototype.setDy = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float dx = 2;
 * @return {number}
 */
proto.FDloc.prototype.getDx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.FDloc.prototype.setDx = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dloc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Dloc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Dloc.displayName = 'proto.Dloc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dloc.prototype.toObject = function(opt_includeInstance) {
  return proto.Dloc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dloc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Dloc.toObject = function(includeInstance, msg) {
  var f, obj = {
    dyDt: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    dxDt: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dloc}
 */
proto.Dloc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dloc;
  return proto.Dloc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dloc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dloc}
 */
proto.Dloc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDyDt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDxDt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dloc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dloc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dloc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Dloc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDyDt();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDxDt();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float dy_dt = 1;
 * @return {number}
 */
proto.Dloc.prototype.getDyDt = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Dloc.prototype.setDyDt = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float dx_dt = 2;
 * @return {number}
 */
proto.Dloc.prototype.getDxDt = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Dloc.prototype.setDxDt = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Turn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Turn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Turn.displayName = 'proto.Turn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Turn.prototype.toObject = function(opt_includeInstance) {
  return proto.Turn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Turn} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Turn.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Turn}
 */
proto.Turn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Turn;
  return proto.Turn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Turn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Turn}
 */
proto.Turn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Turn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Turn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Turn} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Turn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Turn.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Turn.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AMessage.displayName = 'proto.AMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.AMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    turn: (f = msg.getTurn()) && proto.Turn.toObject(includeInstance, f),
    updates: (f = msg.getUpdates()) && proto.UpdateSeq.toObject(includeInstance, f),
    reveals: (f = msg.getReveals()) && proto.RevealSeq.toObject(includeInstance, f),
    adds: (f = msg.getAdds()) && proto.AddSeq.toObject(includeInstance, f),
    dels: (f = msg.getDels()) && proto.DelSeq.toObject(includeInstance, f),
    terImages: (f = msg.getTerImages()) && proto.TerImageSeq.toObject(includeInstance, f),
    modImages: (f = msg.getModImages()) && proto.ModImageSeq.toObject(includeInstance, f),
    zHeightMap: (f = msg.getZHeightMap()) && proto.ZHeightMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AMessage}
 */
proto.AMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AMessage;
  return proto.AMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AMessage}
 */
proto.AMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Turn;
      reader.readMessage(value,proto.Turn.deserializeBinaryFromReader);
      msg.setTurn(value);
      break;
    case 2:
      var value = new proto.UpdateSeq;
      reader.readMessage(value,proto.UpdateSeq.deserializeBinaryFromReader);
      msg.setUpdates(value);
      break;
    case 3:
      var value = new proto.RevealSeq;
      reader.readMessage(value,proto.RevealSeq.deserializeBinaryFromReader);
      msg.setReveals(value);
      break;
    case 4:
      var value = new proto.AddSeq;
      reader.readMessage(value,proto.AddSeq.deserializeBinaryFromReader);
      msg.setAdds(value);
      break;
    case 5:
      var value = new proto.DelSeq;
      reader.readMessage(value,proto.DelSeq.deserializeBinaryFromReader);
      msg.setDels(value);
      break;
    case 21:
      var value = new proto.TerImageSeq;
      reader.readMessage(value,proto.TerImageSeq.deserializeBinaryFromReader);
      msg.setTerImages(value);
      break;
    case 22:
      var value = new proto.ModImageSeq;
      reader.readMessage(value,proto.ModImageSeq.deserializeBinaryFromReader);
      msg.setModImages(value);
      break;
    case 25:
      var value = new proto.ZHeightMap;
      reader.readMessage(value,proto.ZHeightMap.deserializeBinaryFromReader);
      msg.setZHeightMap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTurn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Turn.serializeBinaryToWriter
    );
  }
  f = message.getUpdates();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UpdateSeq.serializeBinaryToWriter
    );
  }
  f = message.getReveals();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RevealSeq.serializeBinaryToWriter
    );
  }
  f = message.getAdds();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.AddSeq.serializeBinaryToWriter
    );
  }
  f = message.getDels();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DelSeq.serializeBinaryToWriter
    );
  }
  f = message.getTerImages();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.TerImageSeq.serializeBinaryToWriter
    );
  }
  f = message.getModImages();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.ModImageSeq.serializeBinaryToWriter
    );
  }
  f = message.getZHeightMap();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.ZHeightMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional Turn turn = 1;
 * @return {?proto.Turn}
 */
proto.AMessage.prototype.getTurn = function() {
  return /** @type{?proto.Turn} */ (
    jspb.Message.getWrapperField(this, proto.Turn, 1));
};


/** @param {?proto.Turn|undefined} value */
proto.AMessage.prototype.setTurn = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AMessage.prototype.clearTurn = function() {
  this.setTurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasTurn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateSeq updates = 2;
 * @return {?proto.UpdateSeq}
 */
proto.AMessage.prototype.getUpdates = function() {
  return /** @type{?proto.UpdateSeq} */ (
    jspb.Message.getWrapperField(this, proto.UpdateSeq, 2));
};


/** @param {?proto.UpdateSeq|undefined} value */
proto.AMessage.prototype.setUpdates = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.AMessage.prototype.clearUpdates = function() {
  this.setUpdates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasUpdates = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RevealSeq reveals = 3;
 * @return {?proto.RevealSeq}
 */
proto.AMessage.prototype.getReveals = function() {
  return /** @type{?proto.RevealSeq} */ (
    jspb.Message.getWrapperField(this, proto.RevealSeq, 3));
};


/** @param {?proto.RevealSeq|undefined} value */
proto.AMessage.prototype.setReveals = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.AMessage.prototype.clearReveals = function() {
  this.setReveals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasReveals = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AddSeq adds = 4;
 * @return {?proto.AddSeq}
 */
proto.AMessage.prototype.getAdds = function() {
  return /** @type{?proto.AddSeq} */ (
    jspb.Message.getWrapperField(this, proto.AddSeq, 4));
};


/** @param {?proto.AddSeq|undefined} value */
proto.AMessage.prototype.setAdds = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.AMessage.prototype.clearAdds = function() {
  this.setAdds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasAdds = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DelSeq dels = 5;
 * @return {?proto.DelSeq}
 */
proto.AMessage.prototype.getDels = function() {
  return /** @type{?proto.DelSeq} */ (
    jspb.Message.getWrapperField(this, proto.DelSeq, 5));
};


/** @param {?proto.DelSeq|undefined} value */
proto.AMessage.prototype.setDels = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.AMessage.prototype.clearDels = function() {
  this.setDels(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasDels = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TerImageSeq ter_images = 21;
 * @return {?proto.TerImageSeq}
 */
proto.AMessage.prototype.getTerImages = function() {
  return /** @type{?proto.TerImageSeq} */ (
    jspb.Message.getWrapperField(this, proto.TerImageSeq, 21));
};


/** @param {?proto.TerImageSeq|undefined} value */
proto.AMessage.prototype.setTerImages = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.AMessage.prototype.clearTerImages = function() {
  this.setTerImages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasTerImages = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional ModImageSeq mod_images = 22;
 * @return {?proto.ModImageSeq}
 */
proto.AMessage.prototype.getModImages = function() {
  return /** @type{?proto.ModImageSeq} */ (
    jspb.Message.getWrapperField(this, proto.ModImageSeq, 22));
};


/** @param {?proto.ModImageSeq|undefined} value */
proto.AMessage.prototype.setModImages = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.AMessage.prototype.clearModImages = function() {
  this.setModImages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasModImages = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional ZHeightMap z_height_map = 25;
 * @return {?proto.ZHeightMap}
 */
proto.AMessage.prototype.getZHeightMap = function() {
  return /** @type{?proto.ZHeightMap} */ (
    jspb.Message.getWrapperField(this, proto.ZHeightMap, 25));
};


/** @param {?proto.ZHeightMap|undefined} value */
proto.AMessage.prototype.setZHeightMap = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.AMessage.prototype.clearZHeightMap = function() {
  this.setZHeightMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AMessage.prototype.hasZHeightMap = function() {
  return jspb.Message.getField(this, 25) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Update.displayName = 'proto.Update';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Update} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ishp: jspb.Message.getFieldWithDefault(msg, 3, false),
    floc: (f = msg.getFloc()) && proto.Floc.toObject(includeInstance, f),
    isFloc: jspb.Message.getFieldWithDefault(msg, 5, false),
    iloc: (f = msg.getIloc()) && proto.Iloc.toObject(includeInstance, f),
    isIloc: jspb.Message.getFieldWithDefault(msg, 7, false),
    dloc: (f = msg.getDloc()) && proto.Dloc.toObject(includeInstance, f),
    isDloc: jspb.Message.getFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Update}
 */
proto.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Update;
  return proto.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Update}
 */
proto.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIshp(value);
      break;
    case 4:
      var value = new proto.Floc;
      reader.readMessage(value,proto.Floc.deserializeBinaryFromReader);
      msg.setFloc(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFloc(value);
      break;
    case 6:
      var value = new proto.Iloc;
      reader.readMessage(value,proto.Iloc.deserializeBinaryFromReader);
      msg.setIloc(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsIloc(value);
      break;
    case 8:
      var value = new proto.Dloc;
      reader.readMessage(value,proto.Dloc.deserializeBinaryFromReader);
      msg.setDloc(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDloc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Update} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIshp();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFloc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Floc.serializeBinaryToWriter
    );
  }
  f = message.getIsFloc();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIloc();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Iloc.serializeBinaryToWriter
    );
  }
  f = message.getIsIloc();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDloc();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Dloc.serializeBinaryToWriter
    );
  }
  f = message.getIsDloc();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Update.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Update.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 hp = 2;
 * @return {number}
 */
proto.Update.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Update.prototype.setHp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isHp = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Update.prototype.getIshp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Update.prototype.setIshp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Floc floc = 4;
 * @return {?proto.Floc}
 */
proto.Update.prototype.getFloc = function() {
  return /** @type{?proto.Floc} */ (
    jspb.Message.getWrapperField(this, proto.Floc, 4));
};


/** @param {?proto.Floc|undefined} value */
proto.Update.prototype.setFloc = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Update.prototype.clearFloc = function() {
  this.setFloc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Update.prototype.hasFloc = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_floc = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Update.prototype.getIsFloc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Update.prototype.setIsFloc = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Iloc iloc = 6;
 * @return {?proto.Iloc}
 */
proto.Update.prototype.getIloc = function() {
  return /** @type{?proto.Iloc} */ (
    jspb.Message.getWrapperField(this, proto.Iloc, 6));
};


/** @param {?proto.Iloc|undefined} value */
proto.Update.prototype.setIloc = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Update.prototype.clearIloc = function() {
  this.setIloc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Update.prototype.hasIloc = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_iloc = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Update.prototype.getIsIloc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.Update.prototype.setIsIloc = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional Dloc dloc = 8;
 * @return {?proto.Dloc}
 */
proto.Update.prototype.getDloc = function() {
  return /** @type{?proto.Dloc} */ (
    jspb.Message.getWrapperField(this, proto.Dloc, 8));
};


/** @param {?proto.Dloc|undefined} value */
proto.Update.prototype.setDloc = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.Update.prototype.clearDloc = function() {
  this.setDloc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Update.prototype.hasDloc = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool is_dloc = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Update.prototype.getIsDloc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.Update.prototype.setIsDloc = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateSeq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UpdateSeq.repeatedFields_, null);
};
goog.inherits(proto.UpdateSeq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateSeq.displayName = 'proto.UpdateSeq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UpdateSeq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateSeq.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateSeq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateSeq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateSeq.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    proto.Update.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateSeq}
 */
proto.UpdateSeq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateSeq;
  return proto.UpdateSeq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateSeq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateSeq}
 */
proto.UpdateSeq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Update;
      reader.readMessage(value,proto.Update.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateSeq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateSeq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateSeq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateSeq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Update.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Update updates = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Update>}
 */
proto.UpdateSeq.prototype.getUpdatesList = function() {
  return /** @type{!Array.<!proto.Update>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Update, 1));
};


/** @param {!Array.<!proto.Update>} value */
proto.UpdateSeq.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Update=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Update}
 */
proto.UpdateSeq.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Update, opt_index);
};


proto.UpdateSeq.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ident = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ident, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Ident.displayName = 'proto.Ident';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ident.prototype.toObject = function(opt_includeInstance) {
  return proto.Ident.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ident} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Ident.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    iNdx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mNdx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    display: jspb.Message.getFieldWithDefault(msg, 8, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ident}
 */
proto.Ident.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ident;
  return proto.Ident.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ident} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ident}
 */
proto.Ident.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setINdx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMNdx(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplay(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ident.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ident.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ident} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Ident.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getINdx();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMNdx();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDisplay();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Ident.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Ident.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.Ident.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Ident.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 i_ndx = 3;
 * @return {number}
 */
proto.Ident.prototype.getINdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Ident.prototype.setINdx = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 m_ndx = 4;
 * @return {number}
 */
proto.Ident.prototype.getMNdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Ident.prototype.setMNdx = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string display = 8;
 * @return {string}
 */
proto.Ident.prototype.getDisplay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Ident.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 player_id = 9;
 * @return {number}
 */
proto.Ident.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Ident.prototype.setPlayerId = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Add = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Add, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Add.displayName = 'proto.Add';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Add.prototype.toObject = function(opt_includeInstance) {
  return proto.Add.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Add} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Add.toObject = function(includeInstance, msg) {
  var f, obj = {
    ident: (f = msg.getIdent()) && proto.Ident.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.Update.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Add}
 */
proto.Add.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Add;
  return proto.Add.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Add} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Add}
 */
proto.Add.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Ident;
      reader.readMessage(value,proto.Ident.deserializeBinaryFromReader);
      msg.setIdent(value);
      break;
    case 2:
      var value = new proto.Update;
      reader.readMessage(value,proto.Update.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Add.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Add.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Add} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Add.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Ident.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Update.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ident ident = 1;
 * @return {?proto.Ident}
 */
proto.Add.prototype.getIdent = function() {
  return /** @type{?proto.Ident} */ (
    jspb.Message.getWrapperField(this, proto.Ident, 1));
};


/** @param {?proto.Ident|undefined} value */
proto.Add.prototype.setIdent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Add.prototype.clearIdent = function() {
  this.setIdent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Add.prototype.hasIdent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Update update = 2;
 * @return {?proto.Update}
 */
proto.Add.prototype.getUpdate = function() {
  return /** @type{?proto.Update} */ (
    jspb.Message.getWrapperField(this, proto.Update, 2));
};


/** @param {?proto.Update|undefined} value */
proto.Add.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Add.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Add.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddSeq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AddSeq.repeatedFields_, null);
};
goog.inherits(proto.AddSeq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddSeq.displayName = 'proto.AddSeq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AddSeq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddSeq.prototype.toObject = function(opt_includeInstance) {
  return proto.AddSeq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddSeq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AddSeq.toObject = function(includeInstance, msg) {
  var f, obj = {
    addsList: jspb.Message.toObjectList(msg.getAddsList(),
    proto.Add.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddSeq}
 */
proto.AddSeq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddSeq;
  return proto.AddSeq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddSeq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddSeq}
 */
proto.AddSeq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Add;
      reader.readMessage(value,proto.Add.deserializeBinaryFromReader);
      msg.addAdds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddSeq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddSeq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddSeq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AddSeq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Add.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Add adds = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Add>}
 */
proto.AddSeq.prototype.getAddsList = function() {
  return /** @type{!Array.<!proto.Add>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Add, 1));
};


/** @param {!Array.<!proto.Add>} value */
proto.AddSeq.prototype.setAddsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Add=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Add}
 */
proto.AddSeq.prototype.addAdds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Add, opt_index);
};


proto.AddSeq.prototype.clearAddsList = function() {
  this.setAddsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Del = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Del, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Del.displayName = 'proto.Del';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Del.prototype.toObject = function(opt_includeInstance) {
  return proto.Del.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Del} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Del.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Del}
 */
proto.Del.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Del;
  return proto.Del.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Del} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Del}
 */
proto.Del.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Del.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Del.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Del} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Del.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.Del.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Del.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DelSeq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DelSeq.repeatedFields_, null);
};
goog.inherits(proto.DelSeq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DelSeq.displayName = 'proto.DelSeq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DelSeq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DelSeq.prototype.toObject = function(opt_includeInstance) {
  return proto.DelSeq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DelSeq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DelSeq.toObject = function(includeInstance, msg) {
  var f, obj = {
    delsList: jspb.Message.toObjectList(msg.getDelsList(),
    proto.Del.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DelSeq}
 */
proto.DelSeq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DelSeq;
  return proto.DelSeq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DelSeq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DelSeq}
 */
proto.DelSeq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Del;
      reader.readMessage(value,proto.Del.deserializeBinaryFromReader);
      msg.addDels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DelSeq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DelSeq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DelSeq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DelSeq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Del.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Del dels = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Del>}
 */
proto.DelSeq.prototype.getDelsList = function() {
  return /** @type{!Array.<!proto.Del>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Del, 1));
};


/** @param {!Array.<!proto.Del>} value */
proto.DelSeq.prototype.setDelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Del=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Del}
 */
proto.DelSeq.prototype.addDels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Del, opt_index);
};


proto.DelSeq.prototype.clearDelsList = function() {
  this.setDelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TerRunX = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TerRunX, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TerRunX.displayName = 'proto.TerRunX';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TerRunX.prototype.toObject = function(opt_includeInstance) {
  return proto.TerRunX.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TerRunX} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TerRunX.toObject = function(includeInstance, msg) {
  var f, obj = {
    dx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    zndx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    zval: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TerRunX}
 */
proto.TerRunX.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TerRunX;
  return proto.TerRunX.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TerRunX} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TerRunX}
 */
proto.TerRunX.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setZndx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TerRunX.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TerRunX.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TerRunX} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TerRunX.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getZndx();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getZval();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 dx = 2;
 * @return {number}
 */
proto.TerRunX.prototype.getDx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TerRunX.prototype.setDx = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 tid = 3;
 * @return {number}
 */
proto.TerRunX.prototype.getTid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TerRunX.prototype.setTid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 zndx = 4;
 * @return {number}
 */
proto.TerRunX.prototype.getZndx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TerRunX.prototype.setZndx = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 zval = 5;
 * @return {number}
 */
proto.TerRunX.prototype.getZval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TerRunX.prototype.setZval = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TerRasterY = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TerRasterY.repeatedFields_, null);
};
goog.inherits(proto.TerRasterY, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TerRasterY.displayName = 'proto.TerRasterY';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TerRasterY.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TerRasterY.prototype.toObject = function(opt_includeInstance) {
  return proto.TerRasterY.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TerRasterY} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TerRasterY.toObject = function(includeInstance, msg) {
  var f, obj = {
    loc: (f = msg.getLoc()) && proto.Iloc.toObject(includeInstance, f),
    rowxList: jspb.Message.toObjectList(msg.getRowxList(),
    proto.TerRunX.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TerRasterY}
 */
proto.TerRasterY.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TerRasterY;
  return proto.TerRasterY.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TerRasterY} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TerRasterY}
 */
proto.TerRasterY.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Iloc;
      reader.readMessage(value,proto.Iloc.deserializeBinaryFromReader);
      msg.setLoc(value);
      break;
    case 2:
      var value = new proto.TerRunX;
      reader.readMessage(value,proto.TerRunX.deserializeBinaryFromReader);
      msg.addRowx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TerRasterY.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TerRasterY.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TerRasterY} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TerRasterY.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Iloc.serializeBinaryToWriter
    );
  }
  f = message.getRowxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TerRunX.serializeBinaryToWriter
    );
  }
};


/**
 * optional Iloc loc = 1;
 * @return {?proto.Iloc}
 */
proto.TerRasterY.prototype.getLoc = function() {
  return /** @type{?proto.Iloc} */ (
    jspb.Message.getWrapperField(this, proto.Iloc, 1));
};


/** @param {?proto.Iloc|undefined} value */
proto.TerRasterY.prototype.setLoc = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TerRasterY.prototype.clearLoc = function() {
  this.setLoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TerRasterY.prototype.hasLoc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TerRunX rowx = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TerRunX>}
 */
proto.TerRasterY.prototype.getRowxList = function() {
  return /** @type{!Array.<!proto.TerRunX>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TerRunX, 2));
};


/** @param {!Array.<!proto.TerRunX>} value */
proto.TerRasterY.prototype.setRowxList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TerRunX=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TerRunX}
 */
proto.TerRasterY.prototype.addRowx = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TerRunX, opt_index);
};


proto.TerRasterY.prototype.clearRowxList = function() {
  this.setRowxList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RevealSeq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RevealSeq.repeatedFields_, null);
};
goog.inherits(proto.RevealSeq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RevealSeq.displayName = 'proto.RevealSeq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RevealSeq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RevealSeq.prototype.toObject = function(opt_includeInstance) {
  return proto.RevealSeq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RevealSeq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RevealSeq.toObject = function(includeInstance, msg) {
  var f, obj = {
    rasteryList: jspb.Message.toObjectList(msg.getRasteryList(),
    proto.TerRasterY.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RevealSeq}
 */
proto.RevealSeq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RevealSeq;
  return proto.RevealSeq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RevealSeq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RevealSeq}
 */
proto.RevealSeq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TerRasterY;
      reader.readMessage(value,proto.TerRasterY.deserializeBinaryFromReader);
      msg.addRastery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RevealSeq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RevealSeq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RevealSeq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RevealSeq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRasteryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TerRasterY.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TerRasterY rastery = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TerRasterY>}
 */
proto.RevealSeq.prototype.getRasteryList = function() {
  return /** @type{!Array.<!proto.TerRasterY>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TerRasterY, 1));
};


/** @param {!Array.<!proto.TerRasterY>} value */
proto.RevealSeq.prototype.setRasteryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TerRasterY=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TerRasterY}
 */
proto.RevealSeq.prototype.addRastery = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TerRasterY, opt_index);
};


proto.RevealSeq.prototype.clearRasteryList = function() {
  this.setRasteryList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TerImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TerImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TerImage.displayName = 'proto.TerImage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TerImage.prototype.toObject = function(opt_includeInstance) {
  return proto.TerImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TerImage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TerImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    tid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subImage: (f = msg.getSubImage()) && proto.SubImage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TerImage}
 */
proto.TerImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TerImage;
  return proto.TerImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TerImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TerImage}
 */
proto.TerImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.SubImage;
      reader.readMessage(value,proto.SubImage.deserializeBinaryFromReader);
      msg.setSubImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TerImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TerImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TerImage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TerImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubImage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SubImage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 tid = 1;
 * @return {number}
 */
proto.TerImage.prototype.getTid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TerImage.prototype.setTid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.TerImage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TerImage.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SubImage sub_image = 3;
 * @return {?proto.SubImage}
 */
proto.TerImage.prototype.getSubImage = function() {
  return /** @type{?proto.SubImage} */ (
    jspb.Message.getWrapperField(this, proto.SubImage, 3));
};


/** @param {?proto.SubImage|undefined} value */
proto.TerImage.prototype.setSubImage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TerImage.prototype.clearSubImage = function() {
  this.setSubImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TerImage.prototype.hasSubImage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageAry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImageAry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ImageAry.displayName = 'proto.ImageAry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageAry.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageAry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageAry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ImageAry.toObject = function(includeInstance, msg) {
  var f, obj = {
    npixels: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nrows: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ncols: jspb.Message.getFieldWithDefault(msg, 3, 0),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageAry}
 */
proto.ImageAry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageAry;
  return proto.ImageAry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageAry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageAry}
 */
proto.ImageAry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNpixels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNrows(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNcols(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageAry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageAry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageAry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ImageAry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNpixels();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNrows();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNcols();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 npixels = 1;
 * @return {number}
 */
proto.ImageAry.prototype.getNpixels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ImageAry.prototype.setNpixels = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 nrows = 2;
 * @return {number}
 */
proto.ImageAry.prototype.getNrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ImageAry.prototype.setNrows = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 ncols = 3;
 * @return {number}
 */
proto.ImageAry.prototype.getNcols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ImageAry.prototype.setNcols = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.ImageAry.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ImageAry.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SubImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SubImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SubImage.displayName = 'proto.SubImage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SubImage.prototype.toObject = function(opt_includeInstance) {
  return proto.SubImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SubImage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SubImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    y0: jspb.Message.getFieldWithDefault(msg, 2, 0),
    x0: jspb.Message.getFieldWithDefault(msg, 3, 0),
    yPx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    xPx: jspb.Message.getFieldWithDefault(msg, 5, 0),
    yOff: jspb.Message.getFieldWithDefault(msg, 6, 0),
    xOff: jspb.Message.getFieldWithDefault(msg, 7, 0),
    altUrl: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SubImage}
 */
proto.SubImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SubImage;
  return proto.SubImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SubImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SubImage}
 */
proto.SubImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY0(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX0(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYPx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXPx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYOff(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXOff(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAltUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SubImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SubImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SubImage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SubImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getY0();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getX0();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getYPx();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getXPx();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getYOff();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getXOff();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getAltUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint32 y0 = 2;
 * @return {number}
 */
proto.SubImage.prototype.getY0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SubImage.prototype.setY0 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 x0 = 3;
 * @return {number}
 */
proto.SubImage.prototype.getX0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SubImage.prototype.setX0 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 y_px = 4;
 * @return {number}
 */
proto.SubImage.prototype.getYPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SubImage.prototype.setYPx = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 x_px = 5;
 * @return {number}
 */
proto.SubImage.prototype.getXPx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SubImage.prototype.setXPx = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 y_off = 6;
 * @return {number}
 */
proto.SubImage.prototype.getYOff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SubImage.prototype.setYOff = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 x_off = 7;
 * @return {number}
 */
proto.SubImage.prototype.getXOff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.SubImage.prototype.setXOff = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string alt_url = 8;
 * @return {string}
 */
proto.SubImage.prototype.getAltUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.SubImage.prototype.setAltUrl = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ModImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ModImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ModImage.displayName = 'proto.ModImage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ModImage.prototype.toObject = function(opt_includeInstance) {
  return proto.ModImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ModImage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ModImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ndx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subImage: (f = msg.getSubImage()) && proto.SubImage.toObject(includeInstance, f),
    pColor: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ModImage}
 */
proto.ModImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ModImage;
  return proto.ModImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ModImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ModImage}
 */
proto.ModImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNdx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.SubImage;
      reader.readMessage(value,proto.SubImage.deserializeBinaryFromReader);
      msg.setSubImage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ModImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ModImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ModImage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ModImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubImage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SubImage.serializeBinaryToWriter
    );
  }
  f = message.getPColor();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 ndx = 1;
 * @return {number}
 */
proto.ModImage.prototype.getNdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ModImage.prototype.setNdx = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ModImage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ModImage.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SubImage sub_image = 3;
 * @return {?proto.SubImage}
 */
proto.ModImage.prototype.getSubImage = function() {
  return /** @type{?proto.SubImage} */ (
    jspb.Message.getWrapperField(this, proto.SubImage, 3));
};


/** @param {?proto.SubImage|undefined} value */
proto.ModImage.prototype.setSubImage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ModImage.prototype.clearSubImage = function() {
  this.setSubImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ModImage.prototype.hasSubImage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 p_color = 5;
 * @return {number}
 */
proto.ModImage.prototype.getPColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ModImage.prototype.setPColor = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TerImageSeq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TerImageSeq.repeatedFields_, null);
};
goog.inherits(proto.TerImageSeq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TerImageSeq.displayName = 'proto.TerImageSeq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TerImageSeq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TerImageSeq.prototype.toObject = function(opt_includeInstance) {
  return proto.TerImageSeq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TerImageSeq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TerImageSeq.toObject = function(includeInstance, msg) {
  var f, obj = {
    tblk: (f = msg.getTblk()) && proto.ImageAry.toObject(includeInstance, f),
    tmapsList: jspb.Message.toObjectList(msg.getTmapsList(),
    proto.TerImage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TerImageSeq}
 */
proto.TerImageSeq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TerImageSeq;
  return proto.TerImageSeq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TerImageSeq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TerImageSeq}
 */
proto.TerImageSeq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ImageAry;
      reader.readMessage(value,proto.ImageAry.deserializeBinaryFromReader);
      msg.setTblk(value);
      break;
    case 2:
      var value = new proto.TerImage;
      reader.readMessage(value,proto.TerImage.deserializeBinaryFromReader);
      msg.addTmaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TerImageSeq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TerImageSeq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TerImageSeq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TerImageSeq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTblk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ImageAry.serializeBinaryToWriter
    );
  }
  f = message.getTmapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TerImage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageAry tblk = 1;
 * @return {?proto.ImageAry}
 */
proto.TerImageSeq.prototype.getTblk = function() {
  return /** @type{?proto.ImageAry} */ (
    jspb.Message.getWrapperField(this, proto.ImageAry, 1));
};


/** @param {?proto.ImageAry|undefined} value */
proto.TerImageSeq.prototype.setTblk = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TerImageSeq.prototype.clearTblk = function() {
  this.setTblk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TerImageSeq.prototype.hasTblk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TerImage tmaps = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TerImage>}
 */
proto.TerImageSeq.prototype.getTmapsList = function() {
  return /** @type{!Array.<!proto.TerImage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TerImage, 2));
};


/** @param {!Array.<!proto.TerImage>} value */
proto.TerImageSeq.prototype.setTmapsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TerImage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TerImage}
 */
proto.TerImageSeq.prototype.addTmaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TerImage, opt_index);
};


proto.TerImageSeq.prototype.clearTmapsList = function() {
  this.setTmapsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ModImageSeq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ModImageSeq.repeatedFields_, null);
};
goog.inherits(proto.ModImageSeq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ModImageSeq.displayName = 'proto.ModImageSeq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ModImageSeq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ModImageSeq.prototype.toObject = function(opt_includeInstance) {
  return proto.ModImageSeq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ModImageSeq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ModImageSeq.toObject = function(includeInstance, msg) {
  var f, obj = {
    mblk: (f = msg.getMblk()) && proto.ImageAry.toObject(includeInstance, f),
    modelsList: jspb.Message.toObjectList(msg.getModelsList(),
    proto.ModImage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ModImageSeq}
 */
proto.ModImageSeq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ModImageSeq;
  return proto.ModImageSeq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ModImageSeq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ModImageSeq}
 */
proto.ModImageSeq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ImageAry;
      reader.readMessage(value,proto.ImageAry.deserializeBinaryFromReader);
      msg.setMblk(value);
      break;
    case 2:
      var value = new proto.ModImage;
      reader.readMessage(value,proto.ModImage.deserializeBinaryFromReader);
      msg.addModels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ModImageSeq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ModImageSeq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ModImageSeq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ModImageSeq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMblk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ImageAry.serializeBinaryToWriter
    );
  }
  f = message.getModelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ModImage.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageAry mblk = 1;
 * @return {?proto.ImageAry}
 */
proto.ModImageSeq.prototype.getMblk = function() {
  return /** @type{?proto.ImageAry} */ (
    jspb.Message.getWrapperField(this, proto.ImageAry, 1));
};


/** @param {?proto.ImageAry|undefined} value */
proto.ModImageSeq.prototype.setMblk = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ModImageSeq.prototype.clearMblk = function() {
  this.setMblk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ModImageSeq.prototype.hasMblk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ModImage models = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ModImage>}
 */
proto.ModImageSeq.prototype.getModelsList = function() {
  return /** @type{!Array.<!proto.ModImage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ModImage, 2));
};


/** @param {!Array.<!proto.ModImage>} value */
proto.ModImageSeq.prototype.setModelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ModImage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ModImage}
 */
proto.ModImageSeq.prototype.addModels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ModImage, opt_index);
};


proto.ModImageSeq.prototype.clearModelsList = function() {
  this.setModelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZHeightMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ZHeightMap.repeatedFields_, null);
};
goog.inherits(proto.ZHeightMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ZHeightMap.displayName = 'proto.ZHeightMap';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ZHeightMap.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZHeightMap.prototype.toObject = function(opt_includeInstance) {
  return proto.ZHeightMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZHeightMap} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ZHeightMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    zndx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    zvalList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZHeightMap}
 */
proto.ZHeightMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZHeightMap;
  return proto.ZHeightMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZHeightMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZHeightMap}
 */
proto.ZHeightMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setZndx(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setZvalList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZHeightMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZHeightMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZHeightMap} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ZHeightMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZndx();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getZvalList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 zndx = 2;
 * @return {number}
 */
proto.ZHeightMap.prototype.getZndx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ZHeightMap.prototype.setZndx = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated int32 zval = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.ZHeightMap.prototype.getZvalList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.ZHeightMap.prototype.setZvalList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ZHeightMap.prototype.addZval = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.ZHeightMap.prototype.clearZvalList = function() {
  this.setZvalList([]);
};


/**
 * @enum {number}
 */
proto.Fields = {
  NONE: 0,
  TURN: 1,
  UPDATE: 2,
  REVEAL: 3,
  ADD: 4,
  DEL: 5,
  TMAP: 21,
  ZMAP: 22,
  IMAG: 23
};

goog.object.extend(exports, proto);
